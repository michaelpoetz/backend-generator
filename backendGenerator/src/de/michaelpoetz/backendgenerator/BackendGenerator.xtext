grammar de.michaelpoetz.backendgenerator.BackendGenerator with org.eclipse.xtext.common.Terminals

generate backendGenerator "http://www.michaelpoetz.de/backendgenerator/BackendGenerator"

//import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

App:
	(config = Configuration)?
	("Configuration" importConfig = [Configuration])?
	(models += Model)*
;

// Config

/*
 * You can specify how and if classes and interfaces are generated in the name.* fields.
 * Leave them, and no class/interface is generated. Only "mandatory" classes are:
 * The Entity
 * The Service (aka Bean)
 * Optional are:
 * Repository (aka Interface)
 * Webservice
 * Test for Bean
 * Test for Webservice
 */
Configuration:
	"Configuration" name=ID
	"name.service" service = STRING
	"name.interface" interface = STRING?
	"name.webservice" webservice = STRING?
	"name.service.test" service_test = STRING?
	"name.webservice.test" webservice_test = STRING?
	;
// Model

Model:
	"Model" name=ID
	"package" package=STRING
	"comment" comment=STRING
	"since" since=STRING
	properties += Property*
;

Annotation:
	name = STRING
;

Property:
	(annotations += Annotation)* type = STRING name = ID
;
	
// Use this to refer to actual Java Types instead of writing the class name in a String	
//Property:
//	(annotations += Annotation)* type = [jvmTypes::JvmType|QualifiedName] name = ID
//;
//
//QualifiedName: ID ('.' ID)* ;