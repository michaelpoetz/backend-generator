grammar de.michaelpoetz.backendgenerator.BackendGenerator with org.eclipse.xtext.common.Terminals

generate backendGenerator "http://www.michaelpoetz.de/backendgenerator/BackendGenerator"

App:
	(config = Configuration)?
	("Configuration" importConfig = [Configuration])?
	(models += Model)*
;

/* Configuration
 *
 * You can specify how and if classes and interfaces are generated in the name.* fields.
 * Leave them, and no class/interface is generated. Only "mandatory" classes are:
 * The Entity 				- Specified in the Model
 * The Service 				- usually "Bean"
 * Optional are:
 * Repository				- usually "Interface"
 * Webservice				
 * Test for Bean
 * Test for Webservice
 * 
 * You can also configure the TestRunner via the testrunner-Property (JUnit, Arquillian ...)
 */
Configuration:
	"Configuration" name=ID
	("name.service" service = STRING) 
	("name.interface" interface = STRING)?  
	("name.webservice" webservice = STRING)? 
	("name.service.test" service_test = STRING)? 
	("name.webservice.test" webservice_test = STRING)? 
	("testrunner.class" testrunner = STRING)?
	("exception.class" exception = STRING)?
;
	
/* Model
 * 
 */

Model:
	"Model" name=ID
	"package" package=STRING
	"comment" comment=STRING
	"since" since=STRING
	properties += Property*
;

Annotation:
	"@"name = STRING
;

Property:
	(annotations += Annotation)* type = STRING name = ID
;